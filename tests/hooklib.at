# -*- Autotest -*-

AT_BANNER([hooklib])

AT_TESTFUN([abrt_dir_is_in_dump_location],
[[
#include "libabrt.h"
#include <assert.h>

void test(char *name, bool expected)
{
    if (abrt_dir_is_in_dump_location(name) != expected)
    {
        fprintf(stderr, "Bad: %s", name);
        abort();
    }

    free(name);
}

int main(void)
{
    libreport_g_verbose = 3;
    abrt_load_abrt_conf();

    libreport_g_verbose = 3;

    char *name;

    assert(abrt_dir_is_in_dump_location("/") == false);

    asprintf(&name, "%s", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s..evil", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s///", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/.", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s///.", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/./", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/.///", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/..", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s///..", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/../", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/..///", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/good/../../../evil", abrt_g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/good..still", abrt_g_settings_dump_location);
    test(name, true);

    asprintf(&name, "%s/good.new", abrt_g_settings_dump_location);
    test(name, true);

    asprintf(&name, "%s/.meta", abrt_g_settings_dump_location);
    test(name, true);

    asprintf(&name, "%s/..data", abrt_g_settings_dump_location);
    test(name, true);

    return 0;
}
]])

AT_TESTFUN([abrt_problem_entry_is_post_create_condition],
[[
#include "libabrt.h"
#include <assert.h>

int main(void)
{
    libreport_g_verbose = 3;
    abrt_load_abrt_conf();

    assert(problem_entry_is_post_create_condition(FILENAME_TYPE));
    assert(problem_entry_is_post_create_condition(FILENAME_ANALYZER));
    assert(problem_entry_is_post_create_condition("basename"));

    assert(!problem_entry_is_post_create_condition(FILENAME_TIME));
    assert(!problem_entry_is_post_create_condition(FILENAME_COUNT));
    assert(!problem_entry_is_post_create_condition(FILENAME_REMOTE));
    assert(!problem_entry_is_post_create_condition(FILENAME_PACKAGE));
    assert(!problem_entry_is_post_create_condition(FILENAME_COMPONENT));

    return 0;
}
]])
