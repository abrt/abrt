# Analyze
EVENT=post-create type=Kerneloops remote!=1
        # Honor dmesg_restrict -> bugzilla.redhat.com/1128400
        if [ "$(cat /proc/sys/kernel/dmesg_restrict)" == "0" ]; then
            # >> instead of > is due to bugzilla.redhat.com/854266
            # 'dmesg' file is required by check-oops-for-hw-error
            dmesg >>dmesg
            abrt-action-check-oops-for-hw-error
        fi
        {
        abrt-action-check-oops-for-alt-component || true
        } &&
        {
        # run abrt-action-analyze-oops only if check-hw-error didn't create the
        # required files
        if test ! -f uuid -a ! -f duphash; then
             abrt-action-analyze-oops || exit 1
        fi
        }


# If you want behavior similar to one provided by kerneloops daemon
# distributed by kerneloops.org - that is, if you want
# oopses to be reported automatically and immediately without
# user interaction, uncomment this line:
#EVENT=post-create type=Kerneloops
#        reporter-kerneloops

# Report
#EVENT=report_Kerneloops type=Kerneloops
#        reporter-kerneloops

EVENT=report_Bugzilla type=Kerneloops
        reporter-bugzilla -b \
                -F /etc/libreport/plugins/bugzilla_format_kernel.conf

# Send micro report
EVENT=report_uReport type=Kerneloops
        if [ ! -e mce ]; then
            /usr/libexec/abrt-action-ureport
        else
            echo "Not reportable, problem has hardware character (MCE)"
        fi

# Update ABRT database after successful report to bugzilla
EVENT=post_report type=Kerneloops
        reporter-ureport -A -B

# Automatic/simple GUI-based kernel oopses reporting will do this:
EVENT=report-gui type=Kerneloops mce!=non-fatal
        report-gtk -- "$DUMP_DIR"

EVENT=report-cli type=Kerneloops
        report-cli -- "$DUMP_DIR"

EVENT=report_systemd-journal type=Kerneloops
        reporter-systemd-journal --message-id 8ed36508c5a24d0ab2d633f330899e5f \
                                 -F /etc/libreport/plugins/catalog_koops_format.conf
